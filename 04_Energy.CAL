;last modified 2019. 01. 20. 15:16:22 by Nándi


[Variables]
c1=0.03;                     //Rolling Resistance
c2=0.836;         //drag coeff: 0,5*rho*Cd*A
c3=0.001045;      //lift coeff: 0,5*rho*Cl*A/1000

[Electric_Energy]

Energy_Electr=*(#HV_Current,#HV_Voltage_Before_AIR);
Energy_Electr=/(#Energy_Electr,10000);             // Current, Voltage values: /10, kJ
Ppos=If(#Energy_Electr,>,0,#Energy_Electr,0);
Energy_Electr=Integrate(#Energy_Electr);
Energy_Electric_pos=Integrate(#Ppos);
Delete(#Ppos);
Energy_Electr=Set(Dim='kJ');
Energy_Electric_pos=Set(Dim='kJ');

[Kinetic_Energy]
VS=/(#VehicleSpeed,3.6);
VS=Set(Dim='m/s');

Energy_Kinetic=*(#VS,#VS);
Energy_Kinetic=*(#Energy_Kinetic,0.15);             // *m/2/1000
Energy_Kinetic=Set(DIM='kJ');

//Energy used to speed up the vehicle
Energy_Useful=Derivate(#Energy_Kinetic);
Energy_Useful=If(#Energy_Useful,>,0,#Energy_Useful,0);
Energy_Useful=Integrate(#Energy_Useful);
Energy_Useful=Set(DIM='kJ');

[Rolling Resistance]

P_downforce=*(@c3,#VS);
P_downforce=*(#P_downforce,#VS);
P_downforce=*(#P_downforce,0.03);
P_downforce=*(#P_downforce,#VS);
Energy_RollRes=*(0.08829,#VS);
Energy_RollRes=+(#Energy_RollRes,#P_downforce);
Energy_RollRes=Integrate(#Energy_RollRes);
Energy_RollRes=Set(Dim='kJ');
Delete(#P_downforce);

[Drag]

Power_Drag=*(#VS,@c2);
Power_Drag=*(#VS,#Power_Drag);
Power_Drag=*(#VS,#Power_Drag);
Power_Drag=/(#Power_Drag,1000);
Power_Drag=Set(Dim='kW');
Energy_Drag=Integrate(#Power_Drag,0);
Delete(#VS);

[Motor mechanical power]

P_motor_1=*(#AMK_TorqueLimitPositive_1,#AMK_Actualvelocity_1);
P_motor_1=*(#P_motor_1,@Pi);
P_motor_1=/(#P_motor_1,30);
E_motor_1=Integrate(#P_motor_1);

P_motor_2=*(#AMK_TorqueLimitPositive_2,#AMK_Actualvelocity_2);
P_motor_2=*(#P_motor_2,@Pi);
P_motor_2=/(#P_motor_2,30);
E_motor_2=Integrate(#P_motor_2);

P_motor_3=*(#AMK_TorqueLimitPositive_3,#AMK_Actualvelocity_3);
P_motor_3=*(#P_motor_3,@Pi);
P_motor_3=/(#P_motor_3,30);
E_motor_3=Integrate(#P_motor_3);

P_motor_4=*(#AMK_TorqueLimitPositive_4,#AMK_Actualvelocity_4);
P_motor_4=*(#P_motor_4,@Pi);
P_motor_4=/(#P_motor_4,30);
E_motor_4=Integrate(#P_motor_4);

E_motors=+(#E_motor_1,#E_motor_2);
E_motors=+(#E_motors,#E_motor_3);
E_motors=+(#E_motors,#E_motor_4);
E_motors=/(#E_motors,1000);

Motor_Efficiency=+(#P_motor_1,#P_motor_2);
Motor_Efficiency=+(#Motor_Efficiency,#P_motor_3);
Motor_Efficiency=+(#Motor_Efficiency,#P_motor_4);
Motor_Efficiency=/(#Motor_Efficiency,#Power_Electric);
Motor_Efficiency=/(#Motor_Efficiency,10);
Motor_Efficiency=Set(DIM='-');

[mAh]
INT_HV_current_Pos=If(#HV_Current,>,0,#HV_Current,0);
INT_HV_current_Neg=If(#HV_Current,>,0,0,#HV_Current);
INT_HV_current_Pos=Integrate(#INT_HV_current_Pos);
INT_HV_current_Neg=Integrate(#INT_HV_current_Neg);
INT_HV_current_Pos=/(#INT_HV_current_Pos,36);
INT_HV_current_Neg=/(#INT_HV_current_Neg,36);
INT_HV_current_Pos=Set(DIM='mAh');
INT_HV_current_Neg=Set(DIM='mAh');
